(Plus3_0) = (@a (Plus3_1 a))
(Plus3_1 a) = (+ 3 (a))

(Pred_0) = (@a (Pred_1 a))
(Pred_1 a) = (Pred_split_a_1 a)
	(Pred_split_a_1 0) = let a = 0; 0
	(Pred_split_a_1 a) = (- (a) 1)

(Test1_0) = (Pred_1 (+ 1 (Pred_1 (Plus3_1 40))))

(Twice_0) = (@a (Twice_1 a))
(Twice_1 a) = (* 2 (a))

(Pow2_0) = (@a (Pow2_1 a))
(Pow2_1 a) = (Pow2_split_a_1 a)
	(Pow2_split_a_1 0) = let a = 0; 1
	(Pow2_split_a_1 a) = let b = (Pow2_b_1 a); (Twice_1 (Pow2_1 (b)))
	(Pow2_b_1 a) = (- (a) 1)

(Consume_0) = (@a (Consume_1 a))
(Consume_1 a) = (Consume_split_a_1 a)
	(Consume_split_a_1 0) = let a = 0; 0
	(Consume_split_a_1 a) = let b = (Consume_b_1 a); (Consume_1 (b))
	(Consume_b_1 a) = (- (a) 1)

(Fac_0) = (@a (Fac_1 a))
(Fac_1 a) = (Fac_split_a_1 a)
	(Fac_split_a_1 0) = let a = 0; 1
	(Fac_split_a_1 a) = let b = (Fac_b_1 a); (* (a) (Fac_1 (b)))
	(Fac_b_1 a) = (- (a) 1)

(Fib_0) = (@a (Fib_1 a))
(Fib_1 a) = (Fib_split_a_1 a)
	(Fib_split_a_1 0) = let a = 0; 0
	(Fib_split_a_1 1) = let a = 1; 1
	(Fib_split_a_1 a) = let b = (Fib_b_1 a); (+ (Fib_1 (- (a) 1)) (Fib_1 (b)))
	(Fib_b_1 a) = (- (a) 2)

(If_then_else__0) = (@a (@b (@c (@d (If_then_else__4 a b c d)))))
(If_then_else__1 a) = (@b (@c (@d (If_then_else__4 a b c d))))
(If_then_else__2 a b) = (@c (@d (If_then_else__4 a b c d)))
(If_then_else__3 a b c) = (@d (If_then_else__4 a b c d))
(If_then_else__4 a b c d) = (If_then_else__split_b_4 a b c d)
	(If_then_else__split_b_4 a (False) c d) = let b = (False); (d)
	(If_then_else__split_b_4 a (True) c d) = let b = (True); (c)

(Ifte_0) = (If_then_else__4 Matteo (True_0) 1 0)

(Test2_0) = (Consume_1 (Pow2_1 24))

(Main_0) = (Fib_1 40)

(PutStrLn_1 a) = a

(Main) = (Main_0)