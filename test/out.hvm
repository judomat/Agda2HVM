(Id_0) = (@a (Id_1 a))
(Id_1 a) = (a)

(True_0) = (True)

(False_0) = (False)

(Not_0) = (@a (Not_1 a))
(Not_1 a) = (Not_split_a_1 a)
	(Not_split_a_1 (True)) = let a = (True); (False_0)
	(Not_split_a_1 (False)) = let a = (False); (True_0)

(Ite_0) = (@a (@b (@c (@d (Ite_4 a b c d)))))
(Ite_1 a) = (@b (@c (@d (Ite_4 a b c d))))
(Ite_2 a b) = (@c (@d (Ite_4 a b c d)))
(Ite_3 a b c) = (@d (Ite_4 a b c d))
(Ite_4 a b c d) = (Ite_split_b_4 a b c d)
	(Ite_split_b_4 a (True) c d) = let b = (True); (c)
	(Ite_split_b_4 a (False) c d) = let b = (False); (d)

(Loop_0) = (Loop_0)

(Test1_0) = (Ite_4 Matteo (False_0) (Loop_0) (True_0))

(Zero_0) = (Zero)

(Suc_0) = (@a (Suc_1 a))
(Suc_1 a) = (Suc a)

(One_0) = (Suc_1 (Zero_0))

(Two_0) = (Suc_1 (One_0))

(Three_0) = (Suc_1 (Two_0))

(Pred_0) = (@a (Pred_1 a))
(Pred_1 a) = (Pred_split_a_1 a)
	(Pred_split_a_1 (Zero)) = let a = (Zero); (a)
	(Pred_split_a_1 (Suc b)) = let a = (Suc b); (b)

(Z_x2B__0) = (@a (@b (Z_x2B__2 a b)))
(Z_x2B__1 a) = (@b (Z_x2B__2 a b))
(Z_x2B__2 a b) = (Z_x2B__split_a_2 a b)
	(Z_x2B__split_a_2 (Zero) b) = let a = (Zero); (b)
	(Z_x2B__split_a_2 (Suc c) b) = let a = (Suc c); (Suc_1 (Z_x2B__2 (c) (b)))

(Twice_0) = (@a (Twice_1 a))
(Twice_1 a) = (Twice_split_a_1 a)
	(Twice_split_a_1 (Zero)) = let a = (Zero); (a)
	(Twice_split_a_1 (Suc b)) = let a = (Suc b); (Suc_1 (Suc_1 (Twice_1 (b))))

(Pow2_0) = (@a (Pow2_1 a))
(Pow2_1 a) = (Pow2_split_a_1 a)
	(Pow2_split_a_1 (Zero)) = let a = (Zero); (Suc_1 (a))
	(Pow2_split_a_1 (Suc b)) = let a = (Suc b); (Twice_1 (Pow2_1 (b)))

(Consume_0) = (@a (Consume_1 a))
(Consume_1 a) = (Consume_split_a_1 a)
	(Consume_split_a_1 (Zero)) = let a = (Zero); (a)
	(Consume_split_a_1 (Suc b)) = let a = (Suc b); (Consume_1 (b))

(Test2_0) = (Consume_1 (Pow2_1 (Twice_1 (Twice_1 (Twice_1 (Three_0))))))

(Nil_0) = (Nil)

(Con_0) = (@a (@b (@c (Con_3 a b c))))
(Con_1 a) = (@b (@c (Con_3 a b c)))
(Con_2 a b) = (@c (Con_3 a b c))
(Con_3 a b c) = (Con a b c)

(Head_0) = (@a (@b (@c (Head_3 a b c))))
(Head_1 a) = (@b (@c (Head_3 a b c)))
(Head_2 a b) = (@c (Head_3 a b c))
(Head_3 a b c) = (Head_split_c_3 a b c)
	(Head_split_c_3 a b (Con d e f)) = let c = (Con d e f); (e)

(Tail_0) = (@a (@b (@c (Tail_3 a b c))))
(Tail_1 a) = (@b (@c (Tail_3 a b c)))
(Tail_2 a b) = (@c (Tail_3 a b c))
(Tail_3 a b c) = (Tail_split_c_3 a b c)
	(Tail_split_c_3 a b (Con d e f)) = let c = (Con d e f); (f)

(Map_0) = (@a (@b (@c (@d (@e (Map_5 a b c d e))))))
(Map_1 a) = (@b (@c (@d (@e (Map_5 a b c d e)))))
(Map_2 a b) = (@c (@d (@e (Map_5 a b c d e))))
(Map_3 a b c) = (@d (@e (Map_5 a b c d e)))
(Map_4 a b c d) = (@e (Map_5 a b c d e))
(Map_5 a b c d e) = (Map_split_e_5 a b c d e)
	(Map_split_e_5 a b c d (Nil)) = let e = (Nil); (e)
	(Map_split_e_5 a b c d (Con f g h)) = let e = (Con f g h); (Con_3 (f) ((d) (g)) (Map_5 Matteo Matteo Matteo (d) (h)))

(Test3_0) = (Head_3 Matteo Matteo (Tail_3 Matteo Matteo (Map_5 Matteo Matteo Matteo (Suc_0) (Con_3 (Suc_1 (Suc_1 (Zero_0))) (Zero_0) (Con_3 (Suc_1 (Zero_0)) (Suc_1 (Zero_0)) (Con_3 (Zero_0) (Suc_1 (Suc_1 (Zero_0))) (Nil_0)))))))

(Z123x27x23x7CHx5Cx65llo_0) = (Zero_0)

(Test4_0) = (Z123x27x23x7CHx5Cx65llo_0)

(Fie_0) = (@a (Fie_1 a))
(Fie_1 a) = (Suc_1 (a))

(Foe_0) = (@a (Foe_1 a))
(Foe_1 a) = (Suc_1 (Fie_1 (a)))

(Fun_0) = (Z_x2B__2 (Fie_1 (Suc_1 (Suc_1 (Zero_0)))) (Foe_1 (Suc_1 (Suc_1 (Zero_0)))))

(Main_0) = (Test2_0)

(Main) = (Main_0)