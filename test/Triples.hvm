(Nil_0) = (Nil)

(Cons_0) = (@a (@b (Cons_2 a b)))
(Cons_1 a) = (@b (Cons_2 a b))
(Cons_2 a b) = (Cons a b)

(If_then_else__0) = (@a (@b (@c (@d (If_then_else__4 a b c d)))))
(If_then_else__1 a) = (@b (@c (@d (If_then_else__4 a b c d))))
(If_then_else__2 a b) = (@c (@d (If_then_else__4 a b c d)))
(If_then_else__3 a b c) = (@d (If_then_else__4 a b c d))
(If_then_else__4 a b c d) = (If_then_else__split_b_4 a b c d)
	(If_then_else__split_b_4 a (False) c d) = let b = (False); (d)
	(If_then_else__split_b_4 a (True) c d) = let b = (True); (c)

(Filter_0) = (@a (@b (@c (Filter_3 a b c))))
(Filter_1 a) = (@b (@c (Filter_3 a b c)))
(Filter_2 a b) = (@c (Filter_3 a b c))
(Filter_3 a b c) = (Filter_split_c_3 a b c)
	(Filter_split_c_3 a b (Nil)) = let c = (Nil); (c)
	(Filter_split_c_3 a b (Cons d e)) = let c = (Cons d e); (If_then_else__4 Matteo ((b) (d)) (Cons_2 (d) (Filter_3 Matteo (b) (e))) (Filter_3 Matteo (b) (e)))

(Append_0) = (@a (@b (@c (Append_3 a b c))))
(Append_1 a) = (@b (@c (Append_3 a b c)))
(Append_2 a b) = (@c (Append_3 a b c))
(Append_3 a b c) = (Append_split_b_3 a b c)
	(Append_split_b_3 a (Nil) c) = let b = (Nil); (c)
	(Append_split_b_3 a (Cons d e) c) = let b = (Cons d e); (Cons_2 (d) (Append_3 Matteo (e) (c)))

(Bind_0) = (@a (@b (@c (@d (Bind_4 a b c d)))))
(Bind_1 a) = (@b (@c (@d (Bind_4 a b c d))))
(Bind_2 a b) = (@c (@d (Bind_4 a b c d)))
(Bind_3 a b c) = (@d (Bind_4 a b c d))
(Bind_4 a b c d) = (Bind_split_c_4 a b c d)
	(Bind_split_c_4 a b (Nil) d) = let c = (Nil); (c)
	(Bind_split_c_4 a b (Cons e f) d) = let c = (Cons e f); (Append_3 Matteo ((d) (e)) (Bind_4 Matteo Matteo (f) (d)))

(Range_0) = (@a (@b (Range_2 a b)))
(Range_1 a) = (@b (Range_2 a b))
(Range_2 a b) = (Go_4 Matteo Matteo (Monus_2 (+ 1 (b)) (a)) (a))

(Go_0) = (@a (@b (@c (@d (Go_4 a b c d)))))
(Go_1 a) = (@b (@c (@d (Go_4 a b c d))))
(Go_2 a b) = (@c (@d (Go_4 a b c d)))
(Go_3 a b c) = (@d (Go_4 a b c d))
(Go_4 a b c d) = (Go_split_c_4 a b c d)
	(Go_split_c_4 a b 0 d) = let c = 0; (Nil_0)
	(Go_split_c_4 a b c d) = let e = (Go_e_4 a b c d); (Cons_2 (d) (Go_4 Matteo Matteo (e) (+ 1 (d))))
	(Go_e_4 a b c d) = (- (c) 1)

(Fst_0) = (@a (Fst_1 a))
(Fst_1 a) = (Fst_split_a_1 a)
	(Fst_split_a_1 (Triple b c d)) = let a = (Triple b c d); (b)

(Snd_0) = (@a (Snd_1 a))
(Snd_1 a) = (Snd_split_a_1 a)
	(Snd_split_a_1 (Triple b c d)) = let a = (Triple b c d); (c)

(Trd_0) = (@a (Trd_1 a))
(Trd_1 a) = (Trd_split_a_1 a)
	(Trd_split_a_1 (Triple b c d)) = let a = (Triple b c d); (d)

(Triple_0) = (@a (@b (@c (Triple_3 a b c))))
(Triple_1 a) = (@b (@c (Triple_3 a b c)))
(Triple_2 a b) = (@c (Triple_3 a b c))
(Triple_3 a b c) = (Triple a b c)

(Alltriples_0) = (@a (Alltriples_1 a))
(Alltriples_1 a) = (Bind_4 Matteo Matteo (Range_2 1 (a)) (@b (Bind_4 Matteo Matteo (Range_2 1 (b)) (@c (Bind_4 Matteo Matteo (Range_2 1 (c)) (@d (Cons_2 (Triple_3 (d) (c) (b)) (Nil_0))))))))

(Cartesian_0) = (@a (Cartesian_1 a))
(Cartesian_1 a) = (Cartesian_split_a_1 a)
	(Cartesian_split_a_1 (Triple b c d)) = let a = (Triple b c d); (Eq_2 (+ (* (b) (b)) (* (c) (c))) (* (d) (d)))

(Triples_0) = (@a (Triples_1 a))
(Triples_1 a) = (Filter_3 Matteo (Cartesian_0) (Alltriples_1 (a)))

(Sumall_0) = (@a (Sumall_1 a))
(Sumall_1 a) = (Sumall_split_a_1 a)
	(Sumall_split_a_1 (Nil)) = let a = (Nil); 0
	(Sumall_split_a_1 (Cons b c)) = let a = (Cons b c); (Sumall_split_b_3 a b c)
	(Sumall_split_b_3 a (Triple d e f) c) = let b = (Triple d e f); (+ (+ (+ (Sumall_1 (c)) (d)) (e)) (f))

(Test1_0) = (Sumall_1 (Triples_1 10))

(Main_0) = (Test1_0)

(PutStrLn_1 a) = a

(Eq_2 a b) = (Eq_split_1 (== a b))
	(Eq_split_1 1) = True
	(Eq_split_1 0) = False

(Monus_2 a b) = (Monus_split_3 (> a b) a b)
	(Monus_split_3 1 a b) = (- a b)
	(Monus_split_3 0 a b) = 0

(Main) = (Main_0)