(True_0) = (True)

(False_0) = (False)

(Z_0) = (Z)

(S_0) = (@a (S_1 a))
(S_1 a) = (S a)

(Nil_0) = (Nil)

(Cons_0) = (@a (@b (Cons_2 a b)))
(Cons_2 a b) = (Cons a b)

(Map_0) = (@a (@b (Map_2 a b)))
(Map_2 a b) = (Map_split b a)
	(Map_split (Nil) a) = let b = (Nil);(b)
	(Map_split (Cons c d) a) = let b = (Cons c d);((Cons_0) ((a) (c)) ((Map_0) (a) (d)))

(P_0) = (@a (@b (P_2 a b)))
(P_2 a b) = (P a b)

(Matteo_0) = (Matteo)

(Nikos_0) = (Nikos)

(Luca_0) = (Luca)

(Andrei_0) = (Andrei)

(Friend_0) = (@a (@b (Friend_2 a b)))
(Friend_2 a b) = let c = (False_0);(Friend_split c b a)
	(Friend_split (Matteo) (Matteo) a) = let c = (Matteo);let b = (Matteo);(False_0)
	(Friend_split (Nikos) (Matteo) a) = let c = (Nikos);let b = (Matteo);(True_0)
	(Friend_split (Luca) (Matteo) a) = let c = (Luca);let b = (Matteo);(True_0)
	(Friend_split (Andrei) (Matteo) a) = let c = (Andrei);let b = (Matteo);(True_0)

(Not_0) = (@a (Not_1 a))
(Not_1 a) = (Not_split a)
	(Not_split (True)) = let a = (True);(False_0)
	(Not_split (False)) = let a = (False);(True_0)

(And_0) = (@a (@b (And_2 a b)))
(And_2 a b) = let c = (False_0);(And_split c b a)
	(And_split (True) (True) a) = let c = (True);let b = (True);(b)
	(And_split c b a) = (c)

(Main_0) = ((Map_0) (Not_0) ((Cons_0) (True_0) ((Cons_0) (False_0) (Nil_0))))

(Main) = (Main_0)