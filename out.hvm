(True_0) = (True)
(Case (True) (True)) = 1

(False_0) = (False)
(Case (False) (False)) = 1

(Z_0) = (Z)
(Case (Z) (Z)) = 1

(S_0) = (@a (S_1 a))
(S_1 a) = (S a)
(Case (S a) (S b)) = (& (Case a b) 1)

(Nil_0) = (Nil)
(Case (Nil) (Nil)) = 1

(Cons_0) = (@a (@b (Cons_2 a b)))
(Cons_2 a b) = (Cons a b)
(Case (Cons a b) (Cons c d)) = (& (Case a c) (& (Case b d) 1))

(Map_0) = (@a (@b (Map_2 a b)))
(Map_2 a b) = (If (Case b (Nil)) (b) (Case b (Cons c d)) ((Cons_0) ((a) (c)) ((Map_0) (a) (d))))

(Not_0) = (@a (Not_1 a))
(Not_1 a) = (If (Case a (True)) (False_0) (Case a (False)) (True_0))

(And3_0) = (@a (@b (@c (And3_3 a b c))))
(And3_3 a b c) = let e = let d = (False_0);(If (Case c (True)) (c));(If (Case a (True)) (If (Case c (True)) (c)))
(If (Case a e) t) -> (And3_3_split_a a b c)
If (Case a e) t   -> (And3_3_split_a e b c) = t

(Main_0) = ((Map_0) (Not_0) ((Cons_0) (True_0) ((Cons_0) (False_0) (Nil_0))))

(Match a b) = 0

(If 1 t e) = (t)
(If 0 t e) = (e)

(Main) = (Main_0)