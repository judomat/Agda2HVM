(True_0) = (True)

(False_0) = (False)

(Z_0) = (Z)

(S_0) = (S_1 a)
(S_1 a) = (S a)

(Nil_0) = (Nil)

(Cons_0) = (Cons_2 a b)
(Cons_1 a) = (Cons_2 a b)
(Cons_2 a b) = (Cons a b)

(Map_0) = (Map_2 a b)
(Map_1 a) = (Map_2 a b)
(Map_2 a b) = (Map_split_b_2 a b)
	(Map_split_b_2 a (Nil_0)) = let b = (Nil_0); (b)
	(Map_split_b_2 a (Cons_2 c d)) = let b = (Cons_2 c d); (Cons_2 ((a) (c)) (Map_2 (a) (d)))

(Matteo_0) = (Matteo)

(Nikos_0) = (Nikos)

(Luca_0) = (Luca)

(Andrei_0) = (Andrei)

(Friend_0) = (Friend_2 a b)
(Friend_1 a) = (Friend_2 a b)
(Friend_2 a b) = let c = (Friend_c_2 a b); (Friend_split_b_3 a b c)
	(Friend_split_b_3 a (Matteo_0) c) = let b = (Matteo_0); (False_0)
	(Friend_split_b_3 a b c) = (c)
	(Friend_c_2 a b) = (False_0)

(Not_0) = (Not_1 a)
(Not_1 a) = (Not_split_a_1 a)
	(Not_split_a_1 (True_0)) = let a = (True_0); (False_0)
	(Not_split_a_1 (False_0)) = let a = (False_0); (True_0)

(And_0) = (And_2 a b)
(And_1 a) = (And_2 a b)
(And_2 a b) = let c = (And_c_2 a b); (And_split_a_3 a b c)
	(And_split_a_3 (True_0) b c) = let a = (True_0); (And_split_b_3 a b c)
	(And_split_b_3 a (True_0) c) = let b = (True_0); (b)
	(And_split_b_3 a b c) = (c)
	(And_split_a_3 a b c) = (c)
	(And_c_2 a b) = (False_0)

(And3_0) = (And3_3 a b c)
(And3_1 a) = (And3_3 a b c)
(And3_2 a b) = (And3_3 a b c)
(And3_3 a b c) = let e = (And3_e_3 a b c); (And3_split_a_4 a b c e)
	(And3_split_a_4 (True_0) b c e) = let a = (True_0); (And3_split_c_4 a b c e)
	(And3_split_c_4 a b (True_0) e) = let c = (True_0); (c)
	(And3_split_c_4 a b c e) = (e)
	(And3_split_a_4 a b c e) = (e)
	(And3_e_3 a b c) = let d = (And3_d_3 a b c); (And3_split_c_4 a b c d)
	(And3_split_c_4 a b (True_0) d) = let c = (True_0); (c)
	(And3_split_c_4 a b c d) = (d)
	(And3_d_3 a b c) = (False_0)

(Main_0) = (Map_2 (Not_0) (Cons_2 (True_0) (Cons_2 (False_0) (Cons_2 (True_0) (Nil_0)))))

(Main) = (Main_0)