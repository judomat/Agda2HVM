-- TUESDAY 17 MAY --

For example, this term is **not** allowed:
`let g = λf(λx(f (f x)))
(g g)`
That's because `g` is a function that clones its argument (since `f` is used twice). It is then cloned, so each `g` on the second line is a clone. Then the first clone attempts to clone the second clone. That is considered undefined behavior, and a typed language that compiles to HVM must check that this kind of situation won't happen.
I can't find a program that breaks it..

Primitive operations should be curried too!!

-- TUESDAY 10 MAY --
Now the output is only one HVM file. TODO: add module prefix to name of definitions to distinguish them and make them unique.

-- WEDNESDAY 4 MAY --
I ran into an issue when compiling Triples.agda:
```
open import Agda.Builtin.Bool
open import Agda.Builtin.Nat

variable A B : Set

data List (A : Set) : Set where
  [] : List A
  _::_ : A → List A → List A

infixr 5 _::_

if_then_else_ : {A : Set} → Bool → A → A → A
if true then x else y = x
if false then x else y = y

filter : (A → Bool) → List A → List A
filter p [] = []
filter p (x :: xs) = if p x then x :: filter p xs else filter p xs

_++_ : List A → List A → List A
[]        ++ ys = ys
(x :: xs) ++ ys = x :: (xs ++ ys)

_>>=_ : List A → (A → List B) → List B
[]        >>= f = []
(x :: xs) >>= f = f x ++ (xs >>= f)

range : Nat → Nat → List Nat
range x y = go (suc y - x) x
  where
    go : Nat → Nat → List Nat
    go zero    _ = []
    go (suc m) n = n :: go m (suc n)

record Triple : Set where
  constructor triple
  field
    fst snd trd : Nat

alltriples : Nat → List Triple
alltriples top = range 1 top >>= λ z → range 1 z >>= λ y → range 1 y >>= λ x → (triple x y z) :: []

cartesian : Triple → Bool
cartesian (triple x y z) = x * x + y * y == z * z

triples : Nat → List Triple
triples top = filter cartesian (alltriples top)

sumall : List Triple → Nat
sumall [] = 0
sumall (triple x y z :: xs) = x + y + z + sumall xs

test1 = sumall (triples 200) -- evaluates to 33638

main = test1
```
->
```
(If_then_else True  b c) = b
(If_then_else False  b c) = c

(Filter p Nil)         = Nil
(Filter p (Cons x xs)) = (If_then_else (p x) (Cons x (Filter p xs)) (Filter p xs))

(Append Nil ys)         = ys
(Append (Cons x xs) ys) = (Cons x (Append xs ys))

(Bind Nil f)         = Nil
(Bind (Cons x xs) f) = (Append (f x) (Bind xs f)) 

(Go 0 a)    = Nil
(Go m n) = (Cons n (Go (- m 1) (+ n 1))) 

(Range x y) = (Go (- (+ y 1) x) x)

(Fst (Triple a b c)) = a
(Snd (Triple a b c)) = b
(Trd (Triple a b c)) = c

(Alltriples top) = (Bind (Range 1 top) (@z (Bind (Range 1 z) (@y (Bind (Range 1 y) (@x (Cons (Triple x y z) Nil)))))))

(Cartesian_0) = @t (Cartesian t)
(Cartesian (Triple x y z)) = (== (+ (* x x) (* y y)) (* z z))

(Triples top) = (Filter (Cartesian_0) (Alltriples top))

(Sumall Nil) = 0
(Sumall (Cons (Triple x y z) xs)) = (+ (+ (+ x y) z) (Sumall xs))

(Main) = (Sumall (Triples 200))
```
Because the (op x y) such as (== x y) (> x y) return 1 if true and 0 if false
but the if statement checks for True or False 

Solution:
add a wrapper on the comparisons which returns True and False instead of 0 and 1
(Monus)


HVM is apparently inherently broken. 
The Triples example seems to work in the manual version both interpreted, compiled single-thread and compiled parallel
The Triples example compiled from agda works interpreted, returns a wrong result compiled single-thread and does not complete when compiled parallel


-- SUNDAY 1 MAY --

Surpisingly case splitting appears to be working.
I added support for builin nats like professor cockx did in his scheme extractor.

After running simple benchmarks the HVM extractor appears to be slower than the scheme one, let alone the haskell one.
One reason might be that calling a function now returns always a lambda first and then the arguments are applied to that:
```
(Gen_0) = (@a (Gen_1 a))
(Gen_1 a) = (Gen_split_a a)
	(Gen_split_a 0) = let a = 0; ((Leaf_0) 1)
	(Gen_split_a a) = let b = (Gen_b a); ((Node_0) ((Gen_0) (b)) ((Gen_0) (b)))
	(Gen_b a) = (- (a) 1)

(Sun_0) = (@a (Sun_1 a))
(Sun_1 a) = (Sun_split_a a)
	(Sun_split_a (Node b c)) = let a = (Node b c); (+ ((Sun_0) (b)) ((Sun_0) (c)))
	(Sun_split_a (Leaf d)) = let a = (Leaf d); 1

(Main_0) = ((Sun_0) ((Gen_0) 22))
```
Another reason but which is probably less effectful is that the case splitting happens one varibale at the time.

the program
```
-- A binary tree of uints
data Tree : Set where 
    Node : Tree -> Tree -> Tree
    Leaf : Nat -> Tree

-- Creates a tree with 2^n elements
gen : Nat -> Tree
gen 0 = Leaf 1
gen (suc n) = Node (gen(n)) (gen(n))

-- Adds all elements of a tree
sun : Tree -> Nat
sun (Leaf x)   = 1
sun (Node a b) = sun a + sun b

-- Performs 2^n additions
main = sun (gen 22)
```
runs in 6.01s, 289406979 rewrites and 549454240 words size without the Application-Lambda optimization
runs in 5.55s, 234881034 rewrites and 549454176 words size with    the Application-Lambda optimization

-- SATURDAY 30 APRIL --

Instead of pattern matching on the whole rule I will try to pattern match varibale by variable
For each definition X create a Match function which determines if X and Y are equal

PROBLEM:
the Match rule works either only for constructors of only for numbers. If in the future actual numbers will be used then I will need to change something about this Match rule
(Main) = (Match 1 1) -> 0
(Main) = (Match True True) -> 1

BIG PROBLEM with scoping of variables: 
(Map_2 a b) = (If (Case b (Nil)) (b) (Case b (Cons c d)) ((Cons_0) ((a) (c)) ((Map_0) (a) (d))))
Cannot do ```Case b (Cons c d)``` because c and d are not in scope

Possible solution:
Do like a synthesis: make a new rule for each case for each parameter

PROBLEM with lets:
(define 
  (and3)
  (lambda 
    (a)
    (lambda (b)
      (lambda (c)
        (let 
            (e (let (d (false)) 
                (record-case c ((true) () c) 
                (else d))))
                (record-case a ((true) () 
                    (record-case c ((true) () c) 
                    (else e))) 
                (else e)))
))))

possible solution: move every let to top level

(E) = @a@b@c (let d = (False_0); (E_split_c a b c d))
	(E_split_c a b (True) d) = let c = (True); (c)
	(E_split_c a b c d) = (d)

(And3_3 a b c) = (And3_split_a a b c E)
	(And3_split_a (True) b c e) = let a = (True); (And3_split_c a b c e)
    (And3_split_a a b c e) = ((e) a b c)

	(And3_split_c a b (True) e) = let c = (True); (c)
	(And3_split_c a b c e) = ((e) a b c)

(Main_0) = (And3_3 True False False) -> False

-- FRIDAY 29 APRIL --

TODO: 
 - let contructor (desugar to a lambda)
 - pattern patching (use helper rule)

 PROBLEMS:
 - friend function has no catchall rule
 - the order of the variables is messed up 
 - rn it's not possible to mix Constructors and variables, the constructors will go first always

-- THURSDAY 28 APRIL --

The solution of always using rules with 0 arguments will not work when implementing pattern matching.
Another solution to solve:
 - implementing pattern matching easily
 - currying function
 - supporting eta reduced functions
is a blend of the two previous solutions:
    1) create all curried-functions with less parameters
    2) always use App with 0 arguments first
    3) pattern matching happens only in the rule with the most arguments
Example:
    (Id2_0) = (@a (@b (@c (Id2_3 a b c))))
    (Id2_1 a) = (@b (@c (Id2_3 a b c)))
    (Id2_2 a b) = (@c (Id2_3 a b c))
    (Id2_3 True b c) = (b)
    (Id2_3 False b c) = (c) 

    (Main) = ((Id2_0) True 1 0)
    ->
    1
TODO:
Check if intermidiate sub-functions
    (Id2_1 a) = (@b (@c (Id2_3 a b c)))
    (Id2_2 a b) = (@c (Id2_3 a b c))
are actually needed or not, probably not since App is called always with _0

ETA-reduced functions don't have pattern matching so there's no need to create functions with more parameters




Agda is case sensitive, so naming collisions may arise if simply uppercase the first letter of a definition
possible solution: add underscore and a number after the uppercased defintion because agda does not allow it but HVM does


-- TUESDAY 26 APRIL -- 

HVM does not support currying of Rules
(Matteo a b) = 42

(Main) = ((Matteo 1) 2)
->
((Matteo 1) 2)

a possible solution is creating a number of rules equal to to number of arguments each with different number of arguments
(Matteo2 a b) = 42
(Matteo1 a) = @b (42)
(Matteo0) = @a @b (42)

(Main) = ((Matteo1 1) 2)
->
42

Problem:
(Matteo2 param1 param0) = (param1 param0)
(Matteo1 param1) = @param0 (param1 param0)
(Matteo0) = @param1 @param0 (param1 param0)

(Luca0) = (Matteo1 (@param0 (param0)))
(Luca1 param1) = (Matteo2 (@param0 (param0)) param1) -- Had to add Luca1 from Luca0, so sometimes the index has to increase too.. very complex because Luca0 is eta reduced in agda

(Nikos) = (Luca1 True)

(Main) = Nikos

final solution: always use rules with 0 arguments and call always App with 0 arguments first on that rule
(Matteo) = @x @y (x y)

(Luca) = ((Matteo) (@x (x)))

(Main) = ((Luca) True)

Remarks: This will probably affect performance negatively, but it's the simplest implementation. In the future it may be worth changing this to use rules with many arguments.